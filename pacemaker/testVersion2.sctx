#resource "timing.h"
#hostcode-c "#include \"timing.h\""
#hostcode-c "#include <stdio.h>"
// https://us.nallen.me/cs303/
@ClocksUseSD
scchart pacemaker {
//   const int AVI_VALUE = 3 // 300
//   const int AEI_VALUE = 8 // 800
//   const int PVARP_VALUE = 5 // 50
//   const int VRP_VALUE = 15 // 150
//   const int LRI_VALUE = 10 // 950
//   const int URI_VALUE = 9 //900

  input signal AS, VS
  signal VRP_ACTIVE, URI_ACTIVE, PVARP_ACTIVE, LRI_ACTIVE
  //output signal AP, VP
  
  output signal AP, VP
  
  region "Atrium Actions"{
    clock x = 0
    
    initial state idle 
    if AS || AP go to aa
    if VS || VP go to va

    state aa "Atrial Active" {
      entry do x = 0 // on entry set 
      
      region "AVI" {
        initial state active
        if URI_ACTIVE go to active
        if x >= `AVI_VALUE` go to done
        if !(x >= `AVI_VALUE`) && !LRI_ACTIVE go to done // SPECIAL CASE IF AVI + AEI < LRI         if x < AVI_VALUE && !LRI_ACTIVE go to done
        final state done
        
      }
    }
    if ((VS || pre(VP)) && !VRP_ACTIVE) abort to delay
    do VP join to delay
    
   state delay {
     entry do x = 0
     region "PVARP" {
       initial state active
       if x >= `PVARP_VALUE` go to done
       final state done
     }
   }
   join to va

   
   state va "Ventricle Active" {
     entry do x = 0
     region "AEI" {
       initial state active
       if x >= `AEI_VALUE` - `PVARP_VALUE` go to done
       final state done
     }
   }
   if AS abort to aa
   do AP join to aa
  }
  
  region "Ventricle Actions" {
    initial state idle
    if VS || VP go to active
    state active {
      clock x = 0
      region "VRP" {
        initial state active {
          during do VRP_ACTIVE
        }
        if x >= `VRP_VALUE` go to done
        final state done
      }
    }
    join to idle
  }

  region "URI" {
    initial state idle
    if VS || VP go to URI_LRI
    state URI_LRI {
      clock x = 0

      region{
        initial state active {
          during do URI_ACTIVE
        }
        if x >= `URI_VALUE` go to done

        final state done
      }
    }
    join to idle
  }

  region "LRI"{
    initial state idle
    if VP || VS go to LRI_ACTIVE
    state LRI_ACTIVE{
      clock x = 0
      region{
        initial state active{
          during do LRI_ACTIVE
        }
        if x >= `LRI_VALUE` go to done
          final state done
      }
    }
    if VP || VS go to LRI_ACTIVE
    do VP join to LRI_ACTIVE
  }
  
//     region "URI and LRI Ventricle Actions" {
//     initial state idle
//     if VS || VP go to URI_LRI
//     state URI_LRI {
//       clock x = 0
      
//       region "URI LRI" {
//         initial state URIa {
//           during do URI_ACTIVE
//         }
//         if x >= URI_VALUE go to LRIa
        
//         state LRIa{
//           during do LRI_ACTIVE
//         }
        
//         if x >= LRI_VALUE go to done
//         final state done
//       }
//     }
//     if (pre(VS) || pre(VP)) abort to URI_LRI // if pre(VS) || pre(VP) abort to URI_LRI
//     do VP join to URI_LRI
//   }
}